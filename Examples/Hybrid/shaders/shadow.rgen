#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

// acceleration structure
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

// input/output image to load/store
layout(set = 1, binding = 0, rgba8)       uniform image2D imageAlbedo;
layout(set = 1, binding = 1, rgba8_snorm) uniform image2D imageNormal;
layout(set = 1, binding = 2, rgba32f)     uniform image2D imagePosition;

// light information
layout(push_constant) uniform DirectionalLight {
    vec4 direction;
    vec4 color;
} dirLight;

// ray payload
layout(location = 0) rayPayloadEXT bool inShadow;

void main() {
    // compute pixel coordinate to load data from
    ivec2 coord = ivec2(gl_LaunchIDEXT.xy);

    // load data to compute ray information
    vec3 worldPosition = imageLoad(imagePosition, coord).xyz;
    vec3 worldNormal   = imageLoad(imageNormal, coord).xyz;

    // ray info
    vec3  rayOrigin    = worldPosition;
    vec3  rayDirection = normalize(-dirLight.direction.xyz);
    uint  rayFlags     = gl_RayFlagsOpaqueEXT;
    float tMin         = 0.001;
    float tMax         = 10000.0;

    // trace
    traceRayEXT(topLevelAS,     // acceleration structure
            rayFlags,           // rayFlags
            0xFF,               // cullMask
            0,                  // sbtRecordOffset
            0,                  // sbtRecordStride
            0,                  // missIndex
            rayOrigin,          // ray origin
            tMin,               // ray min range
            rayDirection,       // ray direction
            tMax,               // ray max range
            0                   // payload (location = 0)
            );

    // save normal shadow info
    vec4 normalShadow = vec4(worldNormal, inShadow ? 0.0 : 1.0);
    imageStore(imageNormal, coord, normalShadow);
}
