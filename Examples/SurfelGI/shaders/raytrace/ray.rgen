#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "bxdf.h"
#include "camera.h"
#include "unpack.h"
#include "random.h"
#include "sampling.h"
#include "transform.h"
#include "../common.h"
#include "../halton.h"

const int2 locations_l1[9] = int2[9](
    int2(0, 0), int2(1, 0), int2(2, 0),
    int2(0, 1), int2(1, 1), int2(2, 1),
    int2(0, 2), int2(1, 2), int2(2, 2)
);

const int2 locations_l2[4] = int2[4](
    int2(0, 0), int2(1, 0),
    int2(0, 1), int2(1, 1)
);

layout(push_constant) uniform Info {
    uint lightCount;
} info;

// acceleration structure
layout(set = 0, binding = SCENE_ACCEL_BINDING) uniform
accelerationStructureEXT sceneAS;

// frame information
layout(set = 0, binding = SCENE_FRAME_BINDING) uniform
Frame { FrameInfo data; } frame;

// camera information
layout(set = 0, binding = SCENE_CAMERA_BINDING) uniform
Camera { CameraInfo data; } camera;

// light information
layout(set = 0, binding = SCENE_LIGHT_BINDING) buffer
Light { LightInfo data[]; } lights;

// sky information
layout(set = 0, binding = SCENE_SKY_BINDING) buffer
Sky { SkyInfo data; } sky;

// surfel information
layout(set = 1, binding = SURFEL_BINDING) buffer
SurfelBuffer { Surfel data[]; } surfels;

layout(set = 1, binding = SURFEL_LIVE_BINDING) buffer
SurfelLiveBuffer { uint data[]; } surfelLive;

layout(set = 1, binding = SURFEL_DATA_BINDING) buffer
SurfelDataBuffer { SurfelData data[]; } surfelData;

layout(set = 1, binding = SURFEL_GRID_BINDING) buffer
SurfelGridBuffer { SurfelGridCell data[]; } surfelGrids;

layout(set = 1, binding = SURFEL_CELL_BINDING) buffer
SurfelCellBuffer { uint data[]; } surfelCells;

layout(set = 1, binding = SURFEL_STAT_BINDING) buffer
SurfelStatBuffer { SurfelStat data; } surfelStat;

// surfel depth atlas texture
layout(set = 1, binding = SURFEL_DEPTH_BINDING, rg32f) uniform
image2D surfelDepth;

// surfel ray guiding texture
layout(set = 1, binding = SURFEL_RAYGUIDE_BINDING, r8) uniform
image2D surfelRayGuide;

// surfel ray dir buffer (visualization)
layout(set = 4, binding = DEBUG_SURFEL_RAYDIR_BINDING) buffer
SampleRayDirs { vec3 p[32]; } sampleRayDirs;

// ray payload
layout(location = 0) rayPayloadEXT HitInfo hitData;
layout(location = 1) rayPayloadEXT bool    shadowed;

#include "../tracing.h"
#include "../lighting.h"

float load_rayguide_level1(int2 pixel, int2 pix) {
    return imageLoad(surfelRayGuide, pixel + pix * int2(2, 2) + int2(0, 0)).x
         + imageLoad(surfelRayGuide, pixel + pix * int2(2, 2) + int2(1, 0)).x
         + imageLoad(surfelRayGuide, pixel + pix * int2(2, 2) + int2(0, 1)).x
         + imageLoad(surfelRayGuide, pixel + pix * int2(2, 2) + int2(1, 1)).x;
}

vec3 sample_rayguide(uint surfelIndex, inout RNGState rng, in SurfelData data, out float pdf) {
#if 0
    float accum = 0.0;
    float target = rand(rng);
    int level1index = 0;
    int level2index = 0;

    int2 pixel = int2(unflatten_2d(surfelIndex, uint2(SURFEL_CAPACITY_SQRT)) * SURFEL_RAYGUIDE_TEXELS);

    // We are using 6x6 texels as discrete ray guiding function.
    // Level 1: walk 3x3 texels
    for (level1index = 0; level1index < 9; level1index++) {
        int2 location = locations_l1[level1index];
        float value = load_rayguide_level1(pixel, location);
        if ((accum + value) >= target) {
            break;
        }
        accum += value;
    }

    // Level 2: walk 6x6 texels with hierarchy
    int2 level2base = locations_l1[level1index] * 2;
    for (level2index = 0; level2index < 4; level2index++) {
        int2 location = level2base + locations_l2[level2index];
        float value = imageLoad(surfelRayGuide, location).x;
        if ((accum + value) >= target) {
            break;
        }
        accum += value;
    }

    int2 level2pix = level2base + locations_l2[level2index];
    vec2 uv = vec2(level2pix) / vec2(SURFEL_RAYGUIDE_TEXELS);
    uv.x += rand(rng) / 6.0;
    uv.y += rand(rng) / 6.0;

    pdf = imageLoad(surfelRayGuide, level2pix).x;
    return decode_hemioct(uv * 2.0 - 1.0);
#else
    float accum = 0.0;
    float sumOfRadiance = data.rayGuideScale * SURFEL_RAYGUIDE_TEXELS * SURFEL_RAYGUIDE_TEXELS;
    float target = rand(rng) * sumOfRadiance;

    int2 pixel = int2(unflatten_2d(surfelIndex, uint2(SURFEL_CAPACITY_SQRT)) * SURFEL_RAYGUIDE_TEXELS);
    for (int y = 0; y < SURFEL_RAYGUIDE_TEXELS; y++) {
        for (int x = 0; x < SURFEL_RAYGUIDE_TEXELS; x++) {
            int2 location = int2(x, y);
            float value = imageLoad(surfelRayGuide, pixel + location).x;
            if ((accum + value) >= target) {
                pdf = value / sumOfRadiance;
                vec2 uv = vec2(location) / vec2(SURFEL_RAYGUIDE_TEXELS);
                uv.x += rand(rng) / 6.0;
                uv.y += rand(rng) / 6.0;
                return decode_hemioct(uv * 2.0 - 1.0);
            }
            accum += value;
        }
    }
    pdf = Inv2PI; // fallback to uniform hemisphere sampling
    return vec3(0.0, 0.0, 0.0);
#endif
}

void normalize_rayguide(uint surfelIndex, inout SurfelData data) {
    int2 pixel = int2(unflatten_2d(surfelIndex, uint2(SURFEL_CAPACITY_SQRT)) * SURFEL_RAYGUIDE_TEXELS);

    float sumV = 0.0;
    float maxV = 0.0;
    for (int y = 0; y < SURFEL_RAYGUIDE_TEXELS; y++) {
        for (int x = 0; x < SURFEL_RAYGUIDE_TEXELS; x++) {
            float value = imageLoad(surfelRayGuide, pixel + int2(x, y)).x;
            sumV += value;
            maxV = max(maxV, value);
        }
    }

    for (int y = 0; y < SURFEL_RAYGUIDE_TEXELS; y++) {
        for (int x = 0; x < SURFEL_RAYGUIDE_TEXELS; x++) {
            float value = imageLoad(surfelRayGuide, pixel + int2(x, y)).x / maxV;
            imageStore(surfelRayGuide, pixel + int2(x, y), vec4(value, 0.0, 0.0, 1.0));
        }
    }

    data.rayGuideScale = sumV / (SURFEL_RAYGUIDE_TEXELS * SURFEL_RAYGUIDE_TEXELS);
}

vec4 compute_irradiance_sharing(in CameraInfo camera, in vec3 P, in vec3 N, in vec3 variance) {
    vec4 surfelGI = vec4(0.0);

    // fetch surfel grid
    int3 gridIndex = compute_surfel_grid(camera, P);
    uint cellIndex = compute_surfel_cell(gridIndex);
    SurfelGridCell cell = surfelGrids.data[cellIndex];

    // iterate through all surfels in this grid cell
    for (uint i = cell.offset; i < cell.offset + cell.count; i++) {
        uint cellIndex = surfelCells.data[i];
        Surfel surfel = surfels.data[cellIndex];
        surfel.radius *= 2.0;

        // apply surfel coverage
        vec3 L = surfel.position - P;
        float d2 = dot(L, L);
        float r2 = surfel.radius * surfel.radius;

        vec3 surfelN = unpack_snorm3(surfel.normal);
        float dotN = dot(surfelN, N);
        if (dotN > 0.0) {
            d2 = dot(L, L);
            float dist = sqrt(d2);

            float contribution = 1.0;
            contribution *= clamp(dotN, 0.0, 1.0);
            contribution *= clamp(1.0 - dist / surfel.radius, 0.0, 1.0);

            #ifdef ENABLE_SURFEL_RADIAL_DEPTH
            // radial depth function
            vec2 radialDepthPixel = compute_surfel_depth_pixel(cellIndex, -L/dist, surfelN);
            vec2 radialDepth = linear_sample_radial_depth(radialDepthPixel);
            contribution *= compute_surfel_depth_weight(radialDepth, dist);
            #endif

            // surfel moment helps prevent incorrect color bleeding.
            contribution = smoothstep(0.0, 1.0, contribution);
            surfelGI += vec4(surfel.color, 1.0) * contribution;
        }
    }
    return surfelGI;
}

// This function is copied and modified from RayTracingGems 2019
void multiscale_mean_estimator(vec3 y, inout SurfelData data, float shortWindowBlend)
{
    vec3 mean = data.mean;
    vec3 shortMean = data.shortMean;
    vec3 variance = data.variance;
    float vbbr = data.vbbr;
    float inconsistency = data.inconsistency;

    // suppress fireflies
    {
        vec3 dev = sqrt(max(vec3(1.0e-5), variance));
        vec3 highThreshold = 0.1 + shortMean + dev * 8.0;
        vec3 overflow = max(vec3(0.0), y - highThreshold);
        y -= overflow;
    }

    vec3 delta = y - shortMean;
    shortMean = mix(shortMean, y, shortWindowBlend);
    vec3 delta2 = y - shortMean;

    // This should be a longer window than shortWindowBlend to avoid bias
    // from variance getting smaller when the short-term mean does
    float varianceBlend = shortWindowBlend * 0.5;
    variance = mix(variance, delta * delta2, varianceBlend);
    vec3 dev = sqrt(max(vec3(1e-5), variance));

    vec3 shortDiff = mean - shortMean;

    float relativeDiff = dot(vec3(0.299, 0.587, 0.114), abs(shortDiff) / max(vec3(1e-5), dev));
    inconsistency = mix(inconsistency, relativeDiff, 0.08);

    float varianceBasedBlendReduction = clamp(
        dot(vec3(0.299, 0.587, 0.114), 0.5 * shortMean / max(vec3(1e-5), dev)),
        1.0 / 32.0, 1.0);

    float catchUpBlend = clamp(smoothstep(0.0, 1.0,
        relativeDiff * max(0.02, inconsistency - 0.2)), 1.0 / 256.0, 1.0);
    catchUpBlend *= vbbr;

    vbbr = mix(vbbr, varianceBasedBlendReduction, 0.1);
    mean = mix(mean, y, clamp(catchUpBlend, 0.0, 1.0));

    // output
    data.mean = mean;
    data.shortMean = shortMean;
    data.vbbr = vbbr;
    data.variance = variance;
    data.inconsistency = inconsistency;
}

void update_surfel_depth(uint2 pixel, float dist) {
    vec2 prev = imageLoad(surfelDepth, int2(pixel)).xy;
    float blend = prev.x < dist ? 0.005 : 0.5;
    vec2 next = mix(prev, vec2(dist, dist * dist), blend);
    imageStore(surfelDepth, int2(pixel), vec4(next, 0.0, 1.0));
}

void update_surfel_rayguide(uint2 pixel, float radiance) {
    float prev = imageLoad(surfelRayGuide, int2(pixel)).x;
    float blend = 0.2;
    float next = mix(prev, radiance, blend);
    imageStore(surfelRayGuide, int2(pixel), vec4(next, 0.0, 0.0, 1.0));
}

void main() {
    uint currentSurfelID = gl_LaunchIDEXT.x * SURFEL_CAPACITY_SQRT
                         + gl_LaunchIDEXT.y;

    // early exit
    if (currentSurfelID >= surfelStat.data.count) return;
    uint liveSurfelID = surfelLive.data[currentSurfelID];

    // frame info
    uint frameID = frame.data.frameID;

    // surfel data
    Surfel surfel = surfels.data[currentSurfelID];
    SurfelData data = surfelData.data[liveSurfelID];

    // surfel info
    float surfelR = surfel.radius;
    vec3  surfelP = surfel.position;
    vec3  surfelN = unpack_snorm3(surfel.normal);

    // lighting result
    vec4 result = vec4(0.0);

    // decide ray budget for this surfel
    int rayCount = int(ceil(mix(1, 16, data.inconsistency)));

    // rng
    RNGState rng = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, frameID);

    #ifdef ENABLE_SURFEL_RAYDIR_VISUALIZATION
    uint sampleRayDirsOffset = currentSurfelID * 16 * 2;
    for (int i = rayCount; i < 16; i++) {
        sampleRayDirs.p[sampleRayDirsOffset + 2 * i + 0] = surfelP;
        sampleRayDirs.p[sampleRayDirsOffset + 2 * i + 1] = surfelP;
    }
    #endif

    // trace ray into scene
    for (int i = 0; i < rayCount; i++) {
        float rnd1 = rand(rng);
        float rnd2 = rand(rng);

        // ray direction
        // use cosine-weighted hemisphere sampling
        vec2 uv = vec2(rnd1, rnd2);

        // sampling generates ray in hemisphere in +z axis
        // rayDirection is a world-space ray (rotated from rayDirZ)
        vec3 rayDirection;

        float pdf;

        #ifdef ENABLE_SURFEL_RAY_GUIDING
        rayDirection = sample_rayguide(currentSurfelID, rng, data, pdf);
        rayDirection = rotate_point(invert_rotation(compute_rotation_to_z_axis(surfelN)), rayDirection);
        #else
        rayDirection = cosine_sample_hemisphere(uv.x, uv.y, pdf);
        rayDirection = rotate_point(invert_rotation(compute_rotation_to_z_axis(surfelN)), rayDirection);
        #endif

        #ifdef ENABLE_SURFEL_RAYDIR_VISUALIZATION
        sampleRayDirs.p[sampleRayDirsOffset + 2 * i + 0] = surfelP;
        sampleRayDirs.p[sampleRayDirsOffset + 2 * i + 1] = surfelP + rayDirection * 0.05;
        #endif

        // ray origin
        vec3 rayOrigin = offset_ray_origin(surfelP, surfelN);

        // ray length
        float tMin = 0.00;
        float tMax = 10000.0;

        #ifdef ENABLE_SURFEL_RADIAL_DEPTH
        // radial depth function
        uint2 radialDepthPixel = uint2(compute_surfel_depth_pixel(currentSurfelID, rayDirection, surfelN));
        #endif

        // trace
        bool hit = trace_scene(rayOrigin, rayDirection, tMin, tMax);
        if (!hit) {
            #ifdef ENABLE_SURFEL_RADIAL_DEPTH
            // update surfel moments with surfel radius
            // Q: Why do we need to multiply by 2?
            // A: Because we want to allow irradiance sharing
            update_surfel_depth(radialDepthPixel, surfel.radius * 2.0);
            #endif

            // get sky color
            vec3 env = sky.data.color * sky.data.intensity;
            result += vec4(env, 1.0);
        }
        else {
            #ifdef ENABLE_SURFEL_RADIAL_DEPTH
            // update surfel moments with surfel radius
            // Q: Why do we need to multiply by 2?
            // A: Because we want to allow irradiance sharing
            float hitDepth = clamp(hitData.distance * 0.8, 0.0, surfel.radius * 2.0);
            update_surfel_depth(radialDepthPixel, hitDepth);
            #endif

            // record hit information
            HitInfo surface;
            surface.position = hitData.position;
            surface.normal = hitData.normal;
            surface.albedo = hitData.albedo;
            surface.emissive = hitData.emissive;
            surface.distance = hitData.distance;

            // radiance information
            vec3 hitResult = vec3(0.0);

            // light sampling
            for (uint i = 0; i < info.lightCount; i++) {
                LightInfo light = lights.data[i];

                // lighting info
                float NoL = -1.0;
                float dist = -1.0;
                vec3 irradiance = vec3(0.0);
                vec3 lightDirection = vec3(0.0);

                switch (light.type) {
                    // compute direct point lighting
                    case LIGHT_TYPE_POINT:
                        irradiance = compute_point_lighting(light, surface, NoL, dist, lightDirection);
                        break;
                    // compute direct spot lighting
                    case LIGHT_TYPE_SPOTLIGHT:
                        irradiance = compute_spot_lighting(light, surface, NoL, dist, lightDirection);
                        break;
                    // compute direct directional lighting
                    case LIGHT_TYPE_DIRECTIONAL:
                        irradiance = compute_directional_lighting(light, surface, NoL, dist, lightDirection);
                        break;
                }

                // add light contribution
                if (NoL > 0.0 && dist > 0.0) {
                    // ray information at hit location
                    rayDirection = lightDirection;
                    rayOrigin = offset_ray_origin(surface.position, surface.normal);

                    // check occlusion
                    if (!trace_shadow(rayOrigin, rayDirection, tMin, dist)) {
                        hitResult += irradiance * Fd_Lambert() * NoL / pdf;
                    }
                }
            }

            // infinite bounces
            #ifdef ENABLE_INFINITE_BOUNCES
            hitResult += compute_surfel_lighting(camera.data, surface.position, surface.normal);
            #endif

            // update ray guiding function
            #ifdef ENABLE_SURFEL_RAY_GUIDING
            uint2 rayGuidePixel = uint2(compute_surfel_rayguide_pixel(currentSurfelID, rayDirection, surfelN));
            float y = luminance(hitResult) * data.rayGuideScale;
            update_surfel_rayguide(rayGuidePixel, y);
            normalize_rayguide(currentSurfelID, data);
            #endif

            // adding to final result
            hitResult *= surface.albedo;
            hitResult += surface.emissive;
            result += vec4(hitResult, 1.0);
        }
        // end of scene ray trace
    }

    // surfel irradiance sharing
    #ifdef ENABLE_IRRADIANCE_SHARING
    vec4 surfelGI = compute_irradiance_sharing(camera.data, surfelP, surfelN, data.variance);
    if (surfelGI.a > 0.0) {
        surfelGI.rgb /= surfelGI.a;
        surfelGI.a = clamp(surfelGI.a, 0.0, 1.0);
        result += surfelGI;
    }
    #endif

    // apply moving average integrator
    if (result.a > 0.0) {
        result /= result.a;
        multiscale_mean_estimator(result.rgb, data, 0.08);
    }

    // update surfel life
    data.life++;

    surfelData.data[liveSurfelID] = data;
}
