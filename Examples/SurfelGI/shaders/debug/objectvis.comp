#version 450
#extension GL_ARB_separate_shader_objects                : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#include "colors.h"
#include "../common.h"

// process based on a 16x16 tile
layout(local_size_x = 16,
       local_size_y = 16,
       local_size_z = 1) in;

// frame info
layout(set = 0, binding = SCENE_FRAME_BINDING) uniform
Frame { FrameInfo data; } frame;

// camera info
layout(set = 0, binding = SCENE_CAMERA_BINDING) uniform
Camera { CameraInfo data; } camera;

// object id from gbuffer
layout(set = 1, binding = GBUFFER_OBJECT_BINDING) uniform
usampler2D objectImage;

// random object color
layout(set = 2, binding = DEBUG_OBJECT_BINDING, rgba8) uniform
image2D coloredObjectImage;

void main() {
    uvec2 pixel = gl_GlobalInvocationID.xy;
    uvec2 resolution = frame.data.resolution;
    if (pixel.x < resolution.x && pixel.y < resolution.y) {
        ivec2 coord = ivec2(pixel);
        uint instanceID = texelFetch(objectImage, coord, 0).x;
        vec3 color = random_colors[instanceID % random_color_count];
        imageStore(coloredObjectImage, coord, vec4(color, 1.0));
    }
}
