#version 450
#extension GL_ARB_separate_shader_objects                : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#include "camera.h"
#include "../common.h"

// process based on a 16x16 tile
layout(local_size_x = 16,
       local_size_y = 16,
       local_size_z = 1) in;

// frame info
layout(set = 0, binding = SCENE_FRAME_BINDING) uniform
Frame { FrameInfo data; } frame;

// camera info
layout(set = 0, binding = SCENE_CAMERA_BINDING) uniform
Camera { CameraInfo data; } camera;

// albedo from gbuffer
layout(set = 1, binding = GBUFFER_ALBEDO_BINDING) uniform
sampler2D albedoImage;

// depth from gbuffer
layout(set = 1, binding = GBUFFER_DEPTH_BINDING) uniform
sampler2D depthImage;

// surfel grid visualization
layout(set = 2, binding = DEBUG_GRID_BINDING, rgba8) uniform
image2D gridImage;

int3 compute_surfel_grid(in CameraInfo cam, vec3 worldPos, out bool inner, out vec4 visual) {
    vec3 grid = (worldPos / SURFEL_GRID_SIZE) - floor(cam.position / SURFEL_GRID_SIZE);

    // check for inner uniform grids
    int3 innerGrid = int3(floor(grid));
    int3 innerBound = int3(SURFEL_GRID_INNER_DIMS) / 2;
    bvec3 valid1 = lessThan(innerGrid, innerBound);
    bvec3 valid2 = greaterThanEqual(innerGrid, -innerBound);
    if (all(valid1) && all(valid2)) {
        visual = vec4(1.0, 1.0, 1.0, 1.0);
        inner = true;
        return innerGrid;
    }

    inner = false;

    // find major axis
    float maxDimValue = max(max(abs(grid.x), abs(grid.y)), abs(grid.z));

    if (maxDimValue == abs(grid.x)) {
        if (grid.x > 0) {
            vec4 tmp0 = cam.surfelGridFrustumPosX * vec4(worldPos, 1.0);
            vec3 tmp1 = tmp0.zyx / tmp0.w;
            int3 tmp2 = int3(floor(tmp1 * SURFEL_GRID_OUTER_DIMS / 2.0));
            visual = vec4(0.0, 1.0, 0.0, 1.0);
            return  tmp2 + int3(SURFEL_GRID_INNER_DIMS.x / 2, 0, 0);
        } else {
            vec4 tmp0 = cam.surfelGridFrustumNegX * vec4(worldPos, 1.0);
            vec3 tmp1 = tmp0.zyx / tmp0.w;
            int3 tmp2 = int3(floor(tmp1 * SURFEL_GRID_OUTER_DIMS / 2.0));
            visual = vec4(0.0, 0.0, 1.0, 1.0);
            return -tmp2 - int3(SURFEL_GRID_INNER_DIMS.x / 2, 0, 0);
        }
    }

    else if (maxDimValue == abs(grid.y)) {
        if (grid.y > 0) {
            vec4 tmp0 = cam.surfelGridFrustumPosY * vec4(worldPos, 1.0);
            vec3 tmp1 = tmp0.xzy / tmp0.w;
            int3 tmp2 = int3(floor(tmp1 * SURFEL_GRID_OUTER_DIMS / 2.0));
            visual = vec4(1.0, 1.0, 0.0, 1.0);
            return  tmp2 + int3(0, SURFEL_GRID_INNER_DIMS.y / 2, 0);
        } else {
            vec4 tmp0 = cam.surfelGridFrustumNegY * vec4(worldPos, 1.0);
            vec3 tmp1 = tmp0.zyx / tmp0.w;
            int3 tmp2 = int3(floor(tmp1 * SURFEL_GRID_OUTER_DIMS / 2.0));
            visual = vec4(0.5, 1.0, 0.5, 1.0);
            return -tmp2 - int3(0, SURFEL_GRID_INNER_DIMS.y / 2, 0);
        }
    }

    else if (maxDimValue == abs(grid.z)) {
        if (grid.z > 0) {
            vec4 tmp0 = cam.surfelGridFrustumPosZ * vec4(worldPos, 1.0);
            vec3 tmp1 = tmp0.xyz / tmp0.w;
            int3 tmp2 = int3(floor(tmp1 * SURFEL_GRID_OUTER_DIMS / 2.0));
            visual = vec4(1.0, 0.0, 1.0, 1.0);
            return  tmp2 + int3(0, 0, SURFEL_GRID_INNER_DIMS.z / 2);
        } else {
            vec4 tmp0 = cam.surfelGridFrustumNegZ * vec4(worldPos, 1.0);
            vec3 tmp1 = tmp0.xyz / tmp0.w;
            int3 tmp2 = int3(floor(tmp1 * SURFEL_GRID_OUTER_DIMS / 2.0));
            visual = vec4(0.0, 1.0, 1.0, 1.0);
            return -tmp2 - int3(0, 0, SURFEL_GRID_INNER_DIMS.z / 2);
        }
    }

    return int3(SURFEL_GRID_DIMS);
}

void main() {
    uvec2 pixel = gl_GlobalInvocationID.xy;
    uvec2 resolution = frame.data.resolution;
    if (pixel.x < resolution.x && pixel.y < resolution.y) {
        ivec2 coord = ivec2(pixel);

        // compute world position
        vec2 ndc = vec2(pixel) / vec2(frame.data.resolution);
        float depth = texelFetch(depthImage, coord, 0).x;
        vec3 position = compute_world_position(ndc, depth, camera.data.invVP);

        // compute grid index
        vec4 visual;
        bool inner;
        int3 grid = compute_surfel_grid(camera.data, position, inner, visual);
        int cellIndex = grid.x + grid.y + grid.z;
        if (inner) {
            int3 base = int3(floor(camera.data.position / SURFEL_GRID_SIZE));
            cellIndex += base.x + base.y + base.z;
        }
        vec4 color = cellIndex % 2 == 0
               ? vec4(0.3, 0.3, 0.3, 1.0)
               : vec4(0.8, 0.8, 0.8, 1.0);

        // visualize invalid grids
        bvec3 invalid = greaterThan(abs(grid), int3(SURFEL_GRID_DIMS) / 2);
        if (any(invalid)) {
            color *= vec4(1.0, 0.0, 0.0, 1.0);
        } else {
            color *= visual;
        }

        imageStore(gridImage, coord, color);
    }
}
