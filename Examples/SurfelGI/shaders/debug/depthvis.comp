#version 450
#extension GL_ARB_separate_shader_objects                : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#include "camera.h"
#include "../common.h"

// process based on a 16x16 tile
layout(local_size_x = 16,
       local_size_y = 16,
       local_size_z = 1) in;

// frame info
layout(set = 0, binding = SCENE_FRAME_BINDING) uniform
Frame { FrameInfo data; } frame;

// camera info
layout(set = 0, binding = SCENE_CAMERA_BINDING) uniform
Camera { CameraInfo data; } camera;

// depth from gbuffer
layout(set = 1, binding = GBUFFER_DEPTH_BINDING) uniform
sampler2D depthImage;

// linearized depth
layout(set = 2, binding = DEBUG_DEPTH_BINDING, r32f) uniform
image2D linearDepthImage;

void main() {
    uvec2 pixel = gl_GlobalInvocationID.xy;
    uvec2 resolution = frame.data.resolution;
    if (pixel.x < resolution.x && pixel.y < resolution.y) {
        ivec2 coord = ivec2(pixel);
        float depth = texelFetch(depthImage, coord, 0).x;
        float zNear = camera.data.zNear;
        float zFar = camera.data.zFar;
        float zFarRcp = camera.data.zFarRcp;
        float linear = linearize_depth(depth, zNear, zFar) * zFarRcp;
        imageStore(linearDepthImage, coord, vec4(linear, linear, linear, 1.0));
    }
}
