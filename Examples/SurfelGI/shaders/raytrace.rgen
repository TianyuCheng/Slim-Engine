#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "surfel.h"
#include "camera.h"
#include "unpack.h"
#include "raycommon.h"

// acceleration structure
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

// camera information
layout(set = 0, binding = 1) uniform Camera {
    mat4 invVP; // inverse(P * V) for world position reconstruction
    vec3 pos;
    float zNear;
    float zFar;
    float zFarRcp;
} camera;

// surfel information
layout(set = 1, binding = 0) buffer SurfelDataBuffer { SurfelData data[]; } surfelData;
layout(set = 1, binding = 1) buffer SurfelStatBuffer { SurfelStat data;   } surfelStat;

// light information
layout(push_constant) uniform DirectionalLight {
    vec4 direction;
    vec4 color;
} dirLight;

// ray payload
layout(location = 0) rayPayloadEXT HitPayload hitPayload;

void main() {
    uint surfel_id = gl_LaunchIDEXT.x * SURFEL_CAPACITY_SQRT + gl_LaunchIDEXT.y;

    // early exit
    if (surfel_id >= surfelStat.data.count) return;

    // get surfel information
    SurfelData surfel = surfelData.data[surfel_id];
    vec3 position = surfel.position;
    vec3 normal = unpack_unitvec3(surfel.normal) * 2.0 - 1.0;

    // accumulation
    vec3 irradiance = vec3(0.0);

    // compute direct lighting
    float NoL = dot(normal, -dirLight.direction.xyz);
    if (NoL > 0.0) {

        // ray info
        vec3  rayOrigin    = position;
        vec3  rayDirection = normal;
        uint  rayFlags     = gl_RayFlagsOpaqueEXT;
        float tMin         = 0.001;
        float tMax         = 10000.0;

        // trace
        traceRayEXT(topLevelAS,     // acceleration structure
                rayFlags,           // rayFlags
                0x1,                // cullMask, only intersect scene geometry
                0,                  // sbtRecordOffset
                0,                  // sbtRecordStride
                0,                  // missIndex
                rayOrigin,          // ray origin
                tMin,               // ray min range
                rayDirection,       // ray direction
                tMax,               // ray max range
                0                   // payload (location = 0)
                );

        irradiance += hitPayload.inShadow * hitPayload.color;
    }

    // update surfel data
    surfel.mean = irradiance;
    surfelData.data[surfel_id] = surfel;
}
