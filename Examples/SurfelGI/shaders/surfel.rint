#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "surfel.h"
#include "unpack.h"
#include "raycommon.h"

// surfel information
layout(set = 1, binding = 0) buffer SurfelStatBuffer { SurfelStat data;   } surfelStat;
layout(set = 1, binding = 1) buffer SurfelDataBuffer { SurfelData data[]; } surfelData;
layout(set = 1, binding = 2) buffer SurfelBuffer     { Surfel     data[]; } surfels;

void hitSurfel(uint index) {
    // ray info
    vec3 ray_origin    = gl_WorldRayOriginEXT;
    vec3 ray_direction = gl_WorldRayDirectionEXT;

    // surfel info
    Surfel surfel = surfels.data[index];
    vec3 normal = normalize(unpack_unitvec3(surfel.normal) * 2.0 - 1.0);

    // not parallel, or hit from backface of surfel
    float denom = dot(normal, -ray_direction);
    if (denom > 0.0) {
        float num = dot(surfel.position - ray_origin, normal);
        float t = num / -denom;
        if (t > 0.0) {
            // check if hit position is within surfel radius
            vec3 hitpos = ray_origin + t * ray_direction;
            vec3 distvec = hitpos - surfel.position;
            float r2 = surfel.radius * surfel.radius;
            float d2 = dot(distvec, distvec);
            if (d2 <= r2) {
                reportIntersectionEXT(t, index);
            }
        }
    }
}

void main()
{
    // surfel count
    uint count = surfelStat.data.count;
    uint index = gl_PrimitiveID;
    if (index >= count) return;

    /* hitSurfel(index); */
    reportIntersectionEXT(0.1, index);
}
