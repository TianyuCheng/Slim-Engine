#version 450
#extension GL_ARB_separate_shader_objects                : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#include "surfel.h"

layout(local_size_x = SURFEL_UPDATE_GROUP_SIZE,
       local_size_y = 1,
       local_size_z = 1) in;

// camera information
layout(set = 0, binding = 0) uniform Camera {
    mat4 V;
    mat4 P;
    mat4 invVP; // inverse(P * V) for world position reconstruction
    vec3 pos;
    float zNear;
    float zFar;
    float zFarRcp;
} camera;

// surfel stat
layout(set = 1, binding = 0) buffer SurfelStatBuffer {
    SurfelStat data;
} surfelStat;

// surfel metadata
layout(set = 1, binding = 1) buffer SurfelBuffer {
    Surfel data[];
} surfels;

// surfel grids
layout(set = 1, binding = 2) buffer SurfelGridBuffer {
    SurfelGrid data[];
} surfelGrids;

// surfel cell
layout(set = 1, binding = 3) buffer SurfelCellBuffer {
    uint data[];
} surfelCells;

void main() {
    uint current_surfel_id = gl_GlobalInvocationID.x;
    uint active_surfel_count = surfelStat.data.count;
    if (current_surfel_id >= active_surfel_count) {
        return;
    }

    Surfel surfel = surfels.data[current_surfel_id];

    // find grid for potential surfel on this pixel
    ivec3 center_cell = compute_surfel_grid(surfel.position, camera.pos);

    // traverse all neighboring cells
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                ivec3 grid_pos = center_cell + ivec3(x, y, z);
                if (is_surfel_grid_valid(grid_pos)) {
                    if (intersect_surfel_grid(surfel, grid_pos, camera.pos)) {
                        uint grid_index = compute_surfel_grid_index(grid_pos);
                        uint cell_offset = surfelGrids.data[grid_index].offset;
                        uint cell_index = atomicAdd(surfelGrids.data[grid_index].count, 1);
                        surfelCells.data[cell_offset + cell_index] = current_surfel_id;
                    }
                }
            }
        }
    }
}
